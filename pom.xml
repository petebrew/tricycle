<!-- Copyright 2011 Peter Brewer and Daniel Murphy Licensed under the Apache 
	License, Version 2.0 (the "License"); you may not use this file except in 
	compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 
	Unless required by applicable law or agreed to in writing, software distributed 
	under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES 
	OR CONDITIONS OF ANY KIND, either express or implied. See the License for 
	the specific language governing permissions and limitations under the License. -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.tridas</groupId>
	<artifactId>tricycle</artifactId>
	<version>0.3.5-SNAPSHOT</version>
	<name>TRiCYCLE</name>
	<description>Universal dendro data file converter</description>
	<licenses>
		<license>
			<name>The Apache Software License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
			<distribution>repo</distribution>
		</license>
	</licenses>
	<developers>
		<developer>
			<name>Peter Brewer</name>
			<email>p.brewer@ltrr.arizona.edu</email>
			<organization>Laboratory of Tree-Ring Research, University of Arizona</organization>
			<organizationUrl>http://ltrr.arizona.edu</organizationUrl>
		</developer>
		<developer>
			<name>Daniel Murphy</name>
			<email>daniel@dmurph.com</email>
			<organization>The Malcolm and Carolyn Wiener Laboratory for Aegean and Near Eastern Dendrochronology</organization>
			<organizationUrl>http://dendro.cornell.edu</organizationUrl>
		</developer>
	</developers>
	<contributors>
		<contributor>
			<name>Esther Jansma</name>
		</contributor>
	</contributors>
	<scm>
		<connection>scm:svn:svn+ssh://tridas.sf.net/svnroot/tridas/DendroLibrary/DendroFileIOGui</connection>
		<developerConnection>scm:svn:svn+ssh://tridas.sf.net/svnroot/tridas/DendroLibrary/DendroFileIOGui</developerConnection>
		<tag>trunk</tag>
		<url>http://tridas.sf.net</url>
	</scm>
	<organization>
		<name>TRiDaS</name>
		<url>http://www.tridas.org</url>
	</organization>
	<properties>
		<version>${project.version}</version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	 <!--  Repository to deploy to.  When deploying make sure your .m2/settings.xml
	 file contains the correct username and password for the repository server -->
	<distributionManagement>
	    <repository>
	      <id>ltrr-releases</id>
	      <url>https://repo.ltrr.arizona.edu/ltrr-releases/</url>
	    </repository>
	    <snapshotRepository>
	      <id>ltrr-snapshots</id>
	      <url>https://repo.ltrr.arizona.edu/ltrr-snapshots/</url>
	    </snapshotRepository>
	</distributionManagement>

	<!-- Additional Repositories required for the build process -->
	<repositories>
		<!-- JBOSS -->
		<repository>
			<id>JBOSS</id>
			<name>JBoss Repository</name>
			<url>https://repository.jboss.org/nexus/content/groups/public</url>
		</repository>

		<!-- TRiDaS -->
		<repository>
			<id>ltrr-releases</id>
			<url>https://repo.ltrr.arizona.edu/ltrr-releases/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>ltrr-snapshots</id>
			<url>https://repo.ltrr.arizona.edu/ltrr-snapshots/</url>
			<releases>
				<enabled>false</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>

		<!-- Codehaus -->
		<repository>
			<id>codehaus</id>
			<name>Codehaus repository</name>
			<url>http://repository.codehaus.org</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
				<updatePolicy>never</updatePolicy>
				<checksumPolicy>fail</checksumPolicy>
			</snapshots>
		</repository>

		<repository>
			<id>java.net</id>
			<url>http://download.java.net/maven/1</url>
			<snapshots>
				<enabled>true</enabled>
				<updatePolicy>never</updatePolicy>
				<checksumPolicy>fail</checksumPolicy>
			</snapshots>
		</repository>

		<repository>
			<id>maven2-repository.dev.java.net</id>
			<name>Java.net Repository for Maven</name>
			<url>http://download.java.net/maven/2/</url>
			<snapshots>
				<enabled>true</enabled>
				<updatePolicy>never</updatePolicy>
				<checksumPolicy>fail</checksumPolicy>
			</snapshots>
		</repository>
	</repositories>

	<!-- Repositories for the plugins -->
	<pluginRepositories>
		<pluginRepository>
			<id>codehaus</id>
			<url>http://repository.codehaus.org/</url>
		</pluginRepository>
	</pluginRepositories>

	<!-- Packages that TRiCYCLE depends upon -->
	<dependencies>
		<dependency>
			<groupId>com.apple</groupId>
			<artifactId>AppleJavaExtensions</artifactId>
			<version>1.4</version>
		</dependency>
		<dependency>
			<groupId>com.dmurph.mvc</groupId>
			<artifactId>java-simple-mvc</artifactId>
			<version>1.4.2</version>
		</dependency>
		<dependency>
			<groupId>com.miglayout</groupId>
			<artifactId>miglayout</artifactId>
			<version>3.7.4</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>jmock</groupId>
			<artifactId>jmock</artifactId>
			<version>1.0.1</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.4</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.tridas</groupId>
			<artifactId>dendrofileio</artifactId>
			<version>1.1.8-SNAPSHOT</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>1.6.1</version>
		</dependency>
	</dependencies>



	<build>

		<!-- Create launch scripts for Linux builds with correct version number -->
		<resources>
			<!-- <resource> <directory>lin-specific</directory> <filtering>true</filtering> 
				</resource> -->

			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>

		</resources>



		<plugins>

			<!-- Ask Subversion for the latest build number -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>buildnumber-maven-plugin</artifactId>
				<version>1.1</version>
				<executions>
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>create</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<doCheck>false</doCheck>
					<doUpdate>false</doUpdate>
				</configuration>
			</plugin>

			<!-- Calculate the build timestamp and add to a project property -->
			<plugin>
				<groupId>org.codehaus.gmaven</groupId>
				<artifactId>gmaven-plugin</artifactId>
				
						<configuration>
							<source>
								import java.util.Date
								import java.text.MessageFormat
								def timestamp = MessageFormat.format("{0,date,dd MMM yyyy, HH:mm}",
								new Date())
								project.properties['buildtimestamp'] = timestamp
							</source>
						</configuration>
				
				
			</plugin>

			<!-- Write project properties into a build properties file -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>properties-maven-plugin</artifactId>
				<version>1.0-alpha-2</version>
				<executions>
					<execution>
						<phase>generate-resources</phase>
						<goals>
							<goal>write-project-properties</goal>
						</goals>
						<configuration>
							<outputFile>
								${project.build.outputDirectory}/build.properties
							</outputFile>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Create the java manifest file -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.3.1</version>
				<configuration>
					<archive>
						<manifest>
							<mainClass>org.tridas.io.gui.App</mainClass>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
						</manifest>
						<manifestEntries>
							<SplashScreen-Image>icons/splash/splash.png</SplashScreen-Image>
							<SCM-Revision>${buildNumber}</SCM-Revision>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>

		<!-- 	<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.7</version>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>-->

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>2.1.2</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>


			<!-- Compile application -->
			<plugin>
				<inherited>true</inherited>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<optimise>true</optimise>
					<debug>true</debug>
				</configuration>
			</plugin>

			<!-- Use shade to create a single jar containing all the dependencies -->

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>1.3.3</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<transformers>
								<transformer
									implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>org.tridas.io.gui.App</mainClass>
								</transformer>
							</transformers>
							<filters>
								<filter>
									<artifact>*:*</artifact>
									<excludes>
										<exclude>META-INF/*.SF</exclude>
										<exclude>META-INF/*.DSA</exclude>
										<exclude>META-INF/*.RSA</exclude>
									</excludes>
								</filter>
							</filters>

						</configuration>
					</execution>
				</executions>
			</plugin>


			<!-- <plugin> <groupId>com.google.code.maven-replacer-plugin</groupId> 
				<artifactId>maven-replacer-plugin</artifactId> <version>1.3.8</version> <executions> 
				<execution> <phase>prepare-package</phase> <goals> <goal>replace</goal> </goals> 
				</execution> </executions> <configuration> <file>lin-specific/tricycle</file> 
				<replacements> <replacement> <token>%%VERSION%%</token> <value>${version}</value> 
				</replacement> </replacements> </configuration> </plugin> -->


			<!-- Create a Linux Ubuntu debian native installer -->
			<plugin>
				<artifactId>jdeb</artifactId>
				<groupId>org.vafer</groupId>
				<version>0.8</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>jdeb</goal>
						</goals>
						<configuration>
							<deb>${project.build.directory}/binaries/${project.version}/Linux/${project.build.finalName}.deb</deb>
							<dataSet>
								<data>
									<src>${project.build.directory}/${project.build.finalName}.jar</src>
									<type>file</type>
									<mapper>
										<type>perm</type>
										<prefix>/usr/share/tricycle</prefix>
									</mapper>
								</data>
								<data>
									<src>target/classes/build/tricycle</src>
									<type>file</type>
									<mapper>
										<type>perm</type>
										<prefix>/usr/bin/</prefix>
										<filemode>755</filemode>
									</mapper>
								</data>
								<data>
									<src>target/classes/build/tricycle.desktop</src>
									<type>file</type>
									<mapper>
										<type>perm</type>
										<prefix>/usr/share/applications/</prefix>
										<filemode>755</filemode>
									</mapper>
								</data>
								<data>
									<src>src/main/resources/icons/48x48/tricycle.png</src>
									<type>file</type>
									<mapper>
										<type>perm</type>
										<prefix>/usr/share/pixmaps/</prefix>
									</mapper>
								</data>
								<data>
									<src>src/main/resources/icons/32x32/tricycle.xpm</src>
									<type>file</type>
									<mapper>
										<type>perm</type>
										<prefix>/usr/share/pixmaps/</prefix>
									</mapper>
								</data>
							</dataSet>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Create a Linux RPM installer n.b. Requires rpmbuild to function -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>rpm-maven-plugin</artifactId>
				<version>2.1-alpha-1</version>
				<executions>
					<execution>
						<goals>
							<goal>rpm</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<copyright>Apache 2.0</copyright>
					<distribution>TRiCYCLE</distribution>
					<group>Applications/File</group>
					<icon>src/main/resources/icons/32x32/tricycle.xpm</icon>
					<packager>TRiDaS</packager>
					<prefix>/usr/local</prefix>
					<!-- <changelogFile>documentation/changelog.txt</changelogFile> -->
					<!-- <requires> <require>jre.i586</require> </requires> -->
					<mappings>
						<mapping>
							<directory>/usr/share/tricycle</directory>
							<filemode>755</filemode>
							<username>root</username>
							<groupname>root</groupname>
							<sources>
								<source>
									<location>${project.build.directory}/${project.build.finalName}.jar</location>
								</source>
							</sources>
						</mapping>
						<mapping>
							<directory>/usr/bin/</directory>
							<filemode>755</filemode>
							<username>root</username>
							<groupname>root</groupname>
							<sources>
								<source>
									<location>${project.build.directory}/classes/build/tricycle</location>
								</source>
							</sources>
						</mapping>
						<mapping>
							<directory>/usr/share/applications/</directory>
							<filemode>755</filemode>
							<username>root</username>
							<groupname>root</groupname>
							<sources>
								<source>
									<location>${project.build.directory}/classes/build/tricycle.desktop</location>
								</source>
							</sources>
						</mapping>
						<mapping>
							<directory>/usr/share/pixmaps/</directory>
							<filemode>755</filemode>
							<username>root</username>
							<groupname>root</groupname>
							<sources>
								<source>
									<location>src/main/resources/icons/32x32/tricycle.xpm</location>
								</source>
							</sources>
						</mapping>
					</mappings>
					<preinstallScriptlet>
						<script>echo "Installing TRiCYCLE now"</script>
					</preinstallScriptlet>
				</configuration>
			</plugin>


			<!-- Create a Windows native executable n.b. this creates a raw executable, 
				not an installer. To create the installer you will need to run the NSIS script 
				outside of Maven -->
			<!-- <plugin>
				<groupId>org.bluestemsoftware.open.maven.plugin</groupId>
				<artifactId>launch4j-plugin</artifactId>
				<version>1.5.0.0</version>
				<executions>
					<execution>
						<id>launch4j</id>
						<phase>package</phase>
						<goals>
							<goal>launch4j</goal>
						</goals>
						<configuration>
							<dontWrapJar>false</dontWrapJar>
							<headerType>gui</headerType>
							<outfile>${project.build.directory}/${project.build.finalName}.exe</outfile>
							<jar>${project.build.directory}/${project.build.finalName}.jar</jar>
							<icon>src/main/resources/icons/application.ico</icon>
							<errTitle>TRiCYCLE</errTitle>
							<jre>
								<minVersion>1.6.0</minVersion>
							</jre>
						</configuration>
					</execution>
				</executions>
			</plugin>-->


			<!-- Create a MacOSX native executable n.b. on Linux and Windows this 
				will create an *app.zip file on MacOSX it will also create a DMG file. Also 
				not that on Linux and Windows computers the App will not include the Apple 
				integration portions therefore they will have an ugly menu bar. -->
			<!-- <plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>osxappbundle-maven-plugin</artifactId>
				<version>1.0-alpha-2</version>
				<configuration>
					<additionalResources>
						<fileSet>
							<directory>${basedir}/documentation/</directory>
							<includes>
								<include>tricycle-manual.pdf</include>
								<include>changelog.txt</include>
							</includes>
						</fileSet>
					</additionalResources>
					<bundleName>TRiCYCLE</bundleName>
					<zipFile>${project.build.directory}/${project.build.finalName}-app.zip</zipFile>
					<mainClass>org.tridas.io.gui.App</mainClass>
					<jvmVersion>1.6+</jvmVersion>
					<iconFile>${basedir}/src/main/resources/icons/application.icns</iconFile>
					<javaApplicationStub>${basedir}/src/main/resources/build/JavaApplicationStub</javaApplicationStub>
				</configuration>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>bundle</goal>
						</goals>
					</execution>
				</executions>
			</plugin>-->
			
			<plugin>
			  <groupId>sh.tak.appbundler</groupId>
			  <artifactId>appbundle-maven-plugin</artifactId>
			  <version>1.0.4</version>
			  <configuration>
			    <mainClass>org.tridas.io.gui.App</mainClass>
			    <iconFile>${basedir}/src/main/resources/icons/application.icns</iconFile>
			  </configuration>
			  <executions>
			    <execution>
			      <phase>package</phase>
			      <goals>
			        <goal>bundle</goal>
			      </goals>
			    </execution>
			  </executions>
			</plugin>


			<!-- Nasty kludge fixes. Tasks that Maven can not perform are done by 
				running Ant instead -->
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>

					<!-- Strip duplicate deps from MacOSX bundle -->	 
					<execution>
					  <id>StripDupsFromOSX</id>
					  <phase>package</phase>
					  <configuration>
					  	<tasks>
						  <taskdef resource="net/sf/antcontrib/antcontrib.properties"
							  classpathref="maven.plugin.classpath"/>	
								  	   <!-- Create the binary folder to hold the MacOSX package -->
									  <echo> MKDIR ${project.build.directory}/binaries/${project.version}/MacOSX </echo>
									  <mkdir dir="${project.build.directory}/binaries/${project.version}/MacOSX"/>
							
									  <!-- Delete the seperate dependencies as they are included in the jar -->
									  <echo> Delete dependencies from JAR: ${project.build.directory}/${project.build.finalName}/TRiCYCLE.app/Contents/Resources/Java/repo</echo>
									  <delete dir="${project.build.directory}/${project.build.finalName}/TRiCYCLE.app/Contents/Resources/Java/repo"/>
									  				
									  <!-- Copy in to our build folder the TRiCYCLE jar -->			
									  <echo>Copy JAR into the build folder</echo>
									  <echo>File: ${project.build.directory}/${project.build.finalName}.jar... into ${project.build.directory}/${project.build.finalName}/TRiCYCLE.app/Contents/Resources/Java/repo/org/tridas/io/${project.version}/</echo>	
									  <copy file="${project.build.directory}/${project.build.finalName}.jar"		
									  		todir="${project.build.directory}/${project.build.finalName}/TRiCYCLE.app/Contents/Resources/Java/repo/org/tridas/io/${project.version}/"/>		
									  		
									  <echo>Delete any previous OSX package</echo>
									  <delete file="${project.build.directory}/binaries/${project.version}/MacOSX/${project.build.finalName}-app.zip" failonerror="false"/>		
									  					
									  										  
									  <!-- Create the app.zip file from our build folder.  555 filemode required for executing-->
									  <echo>Create the app.zip file from our build folder.  555 filemode required for executing</echo>								  
									  <zip destfile="${project.build.directory}/binaries/${project.version}/MacOSX/${project.build.finalName}-app.zip" update="false">
									  	<zipfileset filemode="555" dir="${project.build.directory}/${project.build.finalName}" includes="TRiCYCLE.app/**"/>
									  </zip>
									  
									  <!-- Add license, manual and native package into the root of the zip -->
									  <!-- <echo>Add license, manual and native package into the root of the zip</echo>
									  <zip destfile="${project.build.directory}/binaries/desktop/${project.version}/MacOSX/${project.build.finalName}.zip" update="true">
									  	     <fileset dir="Native/BuildResources/MacBuild/NativePackages/" includes="**/*.pkg"/>
									  		 <fileset dir="${project.build.directory}/classes/Licenses/" includes="**/license.txt"/>
									  		 <fileset dir="Documentation" includes="**/tellervo-manual.pdf"/>
									  </zip>-->

						  </tasks>	  
					  </configuration>
					  <goals>
						  <goal>run</goal>
					  </goals>					
				  </execution>

					<!-- Run Makensis to create the windows installer -->
					<!-- <execution>
						<id>RunNSIS</id>
						<phase>package</phase>
						<configuration>
							<tasks>
								<taskdef resource="net/sf/antcontrib/antcontrib.properties"
									classpathref="maven.plugin.classpath" />
						
								 <mkdir dir="${project.build.directory}/binaries/${project.version}/Windows"/>
								<exec dir="target/classes/build" executable="makensis">
									<arg value="create-win-setup.nsi" />
								</exec>
						
							</tasks>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>-->

					<!-- Copy the RPM into the target folder -->
					<execution>
						<id>CopyRPMFile</id>
						<phase>package</phase>
						<configuration>
							<tasks>
								<taskdef resource="net/sf/antcontrib/antcontrib.properties"
									classpathref="maven.plugin.classpath" />
								<!-- <copy file="${project.build.directory}/rpm/tricycle/RPMS/noarch/${project.build.finalName}*.noarch.rpm" 
									tofile="${project.build.directory}/${project.build.finalName}-1.noarch.rpm" 
									failonerror="false"/> -->
								<copy todir="${project.build.directory}/binaries/${project.version}/Linux/">
									<fileset dir="${project.build.directory}/rpm/tricycle/RPMS/noarch/">
									</fileset>
								</copy>
							</tasks>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
					
					<execution>
						<id>CopyJarFile</id>
						<phase>package</phase>
						<configuration>
							<tasks>
								<taskdef resource="net/sf/antcontrib/antcontrib.properties"
									classpathref="maven.plugin.classpath"/>
							      <mkdir dir="${project.build.directory}/binaries/${project.version}/Java"/>
							      <copy file="${project.build.directory}/${project.build.finalName}.jar" tofile="${project.build.directory}/binaries/${project.version}/Java/${project.build.finalName}.jar" failonerror="false"/>
							</tasks>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>					
					</execution>

				</executions>
				<dependencies>
					<dependency>
						<groupId>ant-contrib</groupId>
						<artifactId>ant-contrib</artifactId>
						<version>1.0b3</version>
						<exclusions>
							<exclusion>
								<groupId>ant</groupId>
								<artifactId>ant</artifactId>
							</exclusion>
						</exclusions>
					</dependency>
					<dependency>
						<groupId>ant</groupId>
						<artifactId>ant-nodeps</artifactId>
						<version>1.6.5</version>
					</dependency>
			          <dependency>
			            <groupId>ant</groupId>
			            <artifactId>ant-jsch</artifactId>
			            <version>1.6.5</version>
			          </dependency>
			          <dependency>
			            <groupId>com.jcraft</groupId>
			            <artifactId>jsch</artifactId>
			            <version>0.1.42</version>
			          </dependency>
				</dependencies>
			</plugin>




		</plugins>
		<pluginManagement>
			<plugins>

				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.mojo
										</groupId>
										<artifactId>
											groovy-maven-plugin
										</artifactId>
										<versionRange>
											[1.3,)
										</versionRange>
										<goals>
											<goal>execute</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute />
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.mojo
										</groupId>
										<artifactId>
											properties-maven-plugin
										</artifactId>
										<versionRange>
											[1.0-alpha-2,)
										</versionRange>
										<goals>
											<goal>
												write-project-properties
											</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

</project>
